// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

/*
Package contract is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	Filter
	Person
	Empty
	Email
	Address
*/
package contract

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Gender int32

const (
	Gender_MALE   Gender = 0
	Gender_FEMALE Gender = 1
)

var Gender_name = map[int32]string{
	0: "MALE",
	1: "FEMALE",
}
var Gender_value = map[string]int32{
	"MALE":   0,
	"FEMALE": 1,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Filter struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Filter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Person struct {
	Id      string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email   []*Email `protobuf:"bytes,3,rep,name=email" json:"email,omitempty"`
	Phone   string   `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Address *Address `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	Gender  Gender   `protobuf:"varint,6,opt,name=gender,enum=contract.Gender" json:"gender,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Person) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetEmail() []*Email {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *Person) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Person) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Person) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_MALE
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Email struct {
	Email     string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	IsPrimary bool   `protobuf:"varint,2,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
}

func (m *Email) Reset()                    { *m = Email{} }
func (m *Email) String() string            { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()               {}
func (*Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Email) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Email) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

type Address struct {
	Street     string `protobuf:"bytes,1,opt,name=street" json:"street,omitempty"`
	City       string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	State      string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	PostalCode string `protobuf:"bytes,4,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Address) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func init() {
	proto.RegisterType((*Filter)(nil), "contract.Filter")
	proto.RegisterType((*Person)(nil), "contract.Person")
	proto.RegisterType((*Empty)(nil), "contract.Empty")
	proto.RegisterType((*Email)(nil), "contract.Email")
	proto.RegisterType((*Address)(nil), "contract.Address")
	proto.RegisterEnum("contract.Gender", Gender_name, Gender_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PersonService service

type PersonServiceClient interface {
	CreatePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	FilterPerson(ctx context.Context, in *Filter, opts ...grpc.CallOption) (PersonService_FilterPersonClient, error)
	GetAllPerson(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PersonService_GetAllPersonClient, error)
}

type personServiceClient struct {
	cc *grpc.ClientConn
}

func NewPersonServiceClient(cc *grpc.ClientConn) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) CreatePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := grpc.Invoke(ctx, "/contract.PersonService/CreatePerson", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) FilterPerson(ctx context.Context, in *Filter, opts ...grpc.CallOption) (PersonService_FilterPersonClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PersonService_serviceDesc.Streams[0], c.cc, "/contract.PersonService/FilterPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceFilterPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_FilterPersonClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type personServiceFilterPersonClient struct {
	grpc.ClientStream
}

func (x *personServiceFilterPersonClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) GetAllPerson(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PersonService_GetAllPersonClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PersonService_serviceDesc.Streams[1], c.cc, "/contract.PersonService/GetAllPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceGetAllPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_GetAllPersonClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type personServiceGetAllPersonClient struct {
	grpc.ClientStream
}

func (x *personServiceGetAllPersonClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PersonService service

type PersonServiceServer interface {
	CreatePerson(context.Context, *Person) (*Person, error)
	FilterPerson(*Filter, PersonService_FilterPersonServer) error
	GetAllPerson(*Empty, PersonService_GetAllPersonServer) error
}

func RegisterPersonServiceServer(s *grpc.Server, srv PersonServiceServer) {
	s.RegisterService(&_PersonService_serviceDesc, srv)
}

func _PersonService_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract.PersonService/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).CreatePerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_FilterPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).FilterPerson(m, &personServiceFilterPersonServer{stream})
}

type PersonService_FilterPersonServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type personServiceFilterPersonServer struct {
	grpc.ServerStream
}

func (x *personServiceFilterPersonServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonService_GetAllPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).GetAllPerson(m, &personServiceGetAllPersonServer{stream})
}

type PersonService_GetAllPersonServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type personServiceGetAllPersonServer struct {
	grpc.ServerStream
}

func (x *personServiceGetAllPersonServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

var _PersonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "contract.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _PersonService_CreatePerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FilterPerson",
			Handler:       _PersonService_FilterPerson_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllPerson",
			Handler:       _PersonService_GetAllPerson_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hello.proto",
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xdd, 0xca, 0xd3, 0x40,
	0x10, 0x75, 0xdb, 0x66, 0xdb, 0x4e, 0x6a, 0xad, 0x8b, 0x48, 0x10, 0x7f, 0x42, 0x40, 0x08, 0x0a,
	0x45, 0x52, 0x2f, 0xbd, 0x29, 0x25, 0xed, 0x8d, 0x42, 0x89, 0x0f, 0x50, 0xd6, 0x64, 0xb0, 0x0b,
	0x9b, 0x6c, 0xd8, 0x5d, 0x84, 0xbc, 0x94, 0xcf, 0xe0, 0xa3, 0x49, 0xb2, 0x1b, 0xeb, 0x47, 0xbf,
	0xbb, 0x99, 0x33, 0x73, 0x76, 0x66, 0xce, 0x59, 0x08, 0xaf, 0x28, 0xa5, 0xda, 0xb6, 0x5a, 0x59,
	0xc5, 0x16, 0xa5, 0x6a, 0xac, 0xe6, 0xa5, 0x4d, 0x5e, 0x03, 0x3d, 0x0a, 0x69, 0x51, 0x33, 0x06,
	0xb3, 0x86, 0xd7, 0x18, 0x91, 0x98, 0xa4, 0xcb, 0x62, 0x88, 0x93, 0x3f, 0x04, 0xe8, 0x19, 0xb5,
	0x51, 0x0d, 0x5b, 0xc3, 0x44, 0x54, 0xbe, 0x38, 0x11, 0xd5, 0xbf, 0xf6, 0xc9, 0xad, 0x9d, 0xbd,
	0x87, 0x00, 0x6b, 0x2e, 0x64, 0x34, 0x8d, 0xa7, 0x69, 0x98, 0x3d, 0xdb, 0x8e, 0x63, 0xb6, 0x79,
	0x0f, 0x17, 0xae, 0xca, 0x5e, 0x40, 0xd0, 0x5e, 0x55, 0x83, 0xd1, 0x6c, 0xe0, 0xba, 0x84, 0x7d,
	0x84, 0x39, 0xaf, 0x2a, 0x8d, 0xc6, 0x44, 0x41, 0x4c, 0xd2, 0x30, 0x7b, 0x7e, 0xa3, 0xef, 0x5d,
	0xa1, 0x18, 0x3b, 0x58, 0x0a, 0xf4, 0x27, 0x36, 0x15, 0xea, 0x88, 0xc6, 0x24, 0x5d, 0x67, 0x9b,
	0x5b, 0xef, 0x69, 0xc0, 0x0b, 0x5f, 0x4f, 0xe6, 0x10, 0xe4, 0x75, 0x6b, 0xbb, 0xe4, 0x4b, 0x1f,
	0xf8, 0xf1, 0x6e, 0x4b, 0x77, 0x8c, 0x5f, 0xea, 0x0d, 0x80, 0x30, 0x97, 0x56, 0x8b, 0x9a, 0xeb,
	0x6e, 0xb8, 0x6a, 0x51, 0x2c, 0x85, 0x39, 0x3b, 0x20, 0x91, 0x30, 0xf7, 0x4b, 0xb0, 0x97, 0x40,
	0x8d, 0xd5, 0x88, 0xd6, 0x3f, 0xe0, 0xb3, 0x5e, 0x91, 0x52, 0xd8, 0x6e, 0x54, 0xa4, 0x8f, 0xfb,
	0x59, 0xc6, 0x72, 0x8b, 0xd1, 0xd4, 0xcd, 0x1a, 0x12, 0xf6, 0x0e, 0xc2, 0x56, 0x19, 0xcb, 0xe5,
	0xa5, 0x54, 0xd5, 0x28, 0x03, 0x38, 0xe8, 0xa0, 0x2a, 0xfc, 0xf0, 0x16, 0xa8, 0x3b, 0x83, 0x2d,
	0x60, 0xf6, 0x6d, 0xff, 0x35, 0xdf, 0x3c, 0x61, 0x00, 0xf4, 0x98, 0x0f, 0x31, 0xc9, 0x7e, 0x13,
	0x78, 0xea, 0x7c, 0xf9, 0x8e, 0xfa, 0x97, 0x28, 0x91, 0x65, 0xb0, 0x3a, 0x68, 0xe4, 0x16, 0xbd,
	0x5d, 0xff, 0x09, 0xe2, 0x90, 0x57, 0x77, 0x08, 0xfb, 0x0c, 0x2b, 0xe7, 0xfd, 0x3d, 0xc7, 0xe1,
	0xf7, 0x9c, 0x4f, 0x84, 0xed, 0x60, 0x75, 0x42, 0xbb, 0x97, 0xd2, 0xb3, 0x1e, 0xb8, 0xdc, 0xda,
	0xee, 0x31, 0xd2, 0x0f, 0x3a, 0xfc, 0xbb, 0xdd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x7e,
	0x1e, 0x5a, 0x86, 0x02, 0x00, 0x00,
}
